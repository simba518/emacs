# -*- mode: snippet -*-
# name: initfile class
# key: inif
# --
#ifndef ${4:_`(upcase (file-name-nondirectory (file-name-sans-extension (buffer-file-name))))`_H_}
#define $4

#include <boost/shared_ptr.hpp>
#include <BaseInitFile.h>

using namespace LSW_SIM;

namespace ${1:LSW_}{

/**
 * @class ${5:`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`}
 * 
 */
class $5: public BaseInitFile{

public:
		$2 get_$3()const{
		  return $3;
        }

protected:
		void print()const;
		void clear();
		bool checkValidation()const;
		bool actualRead();

private:
		${2:string} ${3:ele_name};

};

typedef boost::shared_ptr<$5> p$5;

}//end of namespace

#endif /*$4*/

$0#include "$5.h"

using namespace $1;

void $5::print()const{
	 
  BaseInitFile::print();
  BaseInitFile::print("$3",$3);
}

void $5::clear(){
	 
  BaseInitFile::clear();
  BaseInitFile::clear($3);
}

bool $5::checkValidation()const{

 bool valid = BaseInitFile::checkValidation();
 valid &= BaseInitFile::valid("$3",$3);
 return valid;
}

bool $5::actualRead(){

 bool read_succ = BaseInitFile::actualRead();
 if(read_succ){
   read_succ &= BaseInitFile::read("$3",$3);
 }
 return read_succ;
}
